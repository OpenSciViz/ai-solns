#! /bin/sh
# This is the LHEA perl script: /Home/xtelab/dhon/jul2012/AstroH_B01/headas/demo/x86_64-unknown-linux-gnu-libc2.12/bin/perldemo
# The purpose of this special block is to make this script work with
# the user's local perl, regardless of where that perl is installed.
# The variable LHEAPERL is set by the initialization script to
# point to the local perl installation.
#-------------------------------------------------------------------------------
eval '
if [ "x$LHEAPERL" = x ]; then
  echo "Please run standard LHEA initialization before attempting to run /Home/xtelab/dhon/jul2012/AstroH_B01/headas/demo/x86_64-unknown-linux-gnu-libc2.12/bin/perldemo."
  exit 3
elif [ "$LHEAPERL" = noperl ]; then
  echo "During LHEA initialization, no acceptable version of Perl was found."
  echo "Cannot execute script /Home/xtelab/dhon/jul2012/AstroH_B01/headas/demo/x86_64-unknown-linux-gnu-libc2.12/bin/perldemo."
  exit 3
elif [ `$LHEAPERL -v < /dev/null 2> /dev/null | grep -ic "perl"` -eq 0 ]; then
  echo "LHEAPERL variable does not point to a usable perl."
  exit 3
else
  # Force Perl into 32-bit mode (to match the binaries) if necessary:
  if [ "x$HD_BUILD_ARCH_32_BIT" = xyes ]; then
    if [ `$LHEAPERL -V 2> /dev/null | grep -ic "USE_64_BIT"` -ne 0 ]; then
      VERSIONER_PERL_PREFER_32_BIT=yes
      export VERSIONER_PERL_PREFER_32_BIT
    fi
  fi
  exec $LHEAPERL -x $0 ${1+"$@"}
fi
'
if(0);
# Do not delete anything above this comment from an installed LHEA script!
#-------------------------------------------------------------------------------
#! /usr/bin/perl
#
# This is an example Perl script for use in HEAdas. It has a parameter
# file just like a compiled task and the interface to that is best
# handled via the 'pquery2' utility (see below). The name of the Perl
# executable is optional -- the lhea-fixperl utility should be run
# from the script's Makefile to prepend a block to the script which
# will use the LHEAPERL environment variable at runtime to determine
# the correct Perl executable to use.
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Note that the name of the Perl executable in the first line is
# irrelevant since the script lhea-fixperl will be called to append
# a block of shell code which is designed to use the value of the
# LHEAPERL environment variable at runtime. This variable is set
# during standard HEAdas initialization (ie, headas-init.csh) and
# the correct value is determined when the package is configured
# and installed.

# The following is an example of a Perl subroutine library which goes 
# with the script. It lives in the Perl task directory and during
# installation is placed in $HEADAS/lib/perl. That location is
# appended to the user's PERLLIB or PERL5LIB variable by the
# HEAdas initialization script.

require "perldemo_utils.pl";

if (grep {$_ eq "-h"} @ARGV) {
  print <<EOF;

NAME
  perldemo

INPUT PARAMETERS

infile           - a dummy filename parameter

text             - a dummy string parameter

chatter          - a dummy integer parameter

scale            - a dummy real parameter

(clobber = "no") - a dummy boolean parameter

DESCRIPTION

 This script is an example of how to use pquery2 to equip a HEAdas perl script
 with a parameter file!

EOF
  exit(0);
}

$VERS = 1.0;

# get the invoking string, if it exists, to pass to pquery2 for parsing

# We quote each element since existing quotes have been stripped and we
# need to pass this on to pquery with quotes intact

if(defined(@ARGV)) {
  foreach $i (0 .. $#ARGV) {
    $ARGV[$i] = "\"".$ARGV[$i]."\"";
  }
  $invokestring = join(' ',@ARGV);
}

#
# pquery2 returns the value of the named parameter on
# stdout, prompting if necessary directly to /dev/tty
# Any command line arguments must be passed along.
#
$infile = `pquery2 perldemo infile $invokestring`;
chop($infile);
$text = `pquery2 perldemo text $invokestring`;
chop($text);
$chatter = `pquery2 perldemo chatter $invokestring`;
chop($chatter);
$scale = `pquery2 perldemo scale $invokestring`;
chop($scale);
$clobber = `pquery2 perldemo clobber $invokestring`;
chop($clobber);

# Call a silly subroutine from the accompanying
# perldemo_utils.pl package

&SayIt("\n***PERLDEMO version $VERS***");

# Print the runtime parameter values
# Note that parameters without "l" tokens
# will not be learned.

print "\nParameter list:\n";
print "infile = $infile\n";
print "text = $text\n";
print "chatter = $chatter\n";
print "scale = $scale\n";
print "clobber = $clobber\n";

exit;
